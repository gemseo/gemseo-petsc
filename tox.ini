[tox]
requires = tox-conda >=0.7.3
# For using setuptools_scm.: currently does not work with anaconda.
# isolated_build = true

[testenv]
conda_channels = conda-forge
# Environment reproducibility: do not search default or .condarc channels.
conda_install_args = --override-channels
conda_spec = requirements/conda.txt
deps = -r requirements/test-{basepython}.txt
extras = test
setenv =
    # Workaround matplotlib on windows server 2012 and gitlab-runner,
    # matplotlib cannot access a registry key and falls back to the WINDIR var
    # https://matplotlib.org/stable/api/font_manager_api.html#matplotlib.font_manager.win32FontDirectory.
    WINDIR = {env:WINDIR:C:\Windows}
    # Use a non GUI rendering backend for matplotlib.
    MPLBACKEND = AGG
    # Define pytest options for using coverage.
    coverage: __COVERAGE_POSARGS=--cov --cov-report=xml --cov-report=html --no-cov-on-fail
    # Do not use ssh or rsh for initiating the MPI processes since it may not be available in docker.
    OMPI_MCA_plm_rsh_agent =
passenv =
    # See dev docs.
    GEMSEO_KEEP_IMAGE_COMPARISONS
commands =
    pytest {env:__COVERAGE_POSARGS:} {posargs}

[testenv:check]
description = run code formatting and checking
deps = -r requirements/check.txt
conda_spec =
skip_install = true
whitelist_externals = pre-commit
commands =
    pre-commit install
    pre-commit run --all-files

[testenv:doc]
description = build documentation
basepython = python3.9
deps = -r requirements/doc.txt
extras = doc
passenv =
    # Required by matplotlib.
    HOME
    # Path to the directory that contains plantuml.jar.
    PLANTUML_DIR
commands =
    # Cross platform directory removal.
    python -c "import shutil; shutil.rmtree('doc_src/_modules', ignore_errors=True)"
    sphinx-build -n -j auto -b html doc_src {toxinidir}/doc {posargs:}

[testenv:dist]
description = create and check the pypi distribution
deps = -r requirements/dist.txt
conda_spec =
skip_install = true
whitelist_externals = rm
commands =
    rm -rf dist build
    python -m build --wheel
    twine check dist/*
    # W002: ignore duplicated files.
    check-wheel-contents dist --ignore W002

[testenv:pypi-py{39,310,311}]
description = test the pypi distribution
deps = gemseo-petsc[test]
skip_install = true

[testenv:update-deps-{test,doc,dist,check}]
description = update the envs dependencies
set_env =
pass_env =
deps =
    uv
    check: pre-commit
conda_spec =
skip_install = true
whitelist_externals =
    pip-compile
    check: pre-commit
    test: sed
commands =
    # Passing a posargs will ignore using gemseo from the develop branch and will use a release from PyPI instead.
    test: uv pip compile --upgrade --extra test {posargs:--constraint requirements/test-constraints.in} -o requirements/test-python3.9.txt  --python-version 3.9  pyproject.toml
    test: uv pip compile --upgrade --extra test {posargs:--constraint requirements/test-constraints.in} -o requirements/test-python3.10.txt --python-version 3.10 pyproject.toml
    test: uv pip compile --upgrade --extra test {posargs:--constraint requirements/test-constraints.in} -o requirements/test-python3.11.txt --python-version 3.11 pyproject.toml
    test: sed -i '/mpi4py==/d' requirements/test-python3.9.txt requirements/test-python3.10.txt requirements/test-python3.11.txt
    test: sed -i '/petsc4py==/d' requirements/test-python3.9.txt requirements/test-python3.10.txt requirements/test-python3.11.txt
    test: sed -i '/petsc==/d' requirements/test-python3.9.txt requirements/test-python3.10.txt requirements/test-python3.11.txt
    # Using Python 3.9 for the doc should work everywhere.
    doc:  uv pip compile --upgrade --extra doc  {posargs:--constraint requirements/test-constraints.in} -o requirements/doc.txt             --python-version 3.9  pyproject.toml
    dist:  uv pip compile --upgrade requirements/dist.in        -o requirements/dist.txt
    check: uv pip compile --upgrade requirements/check.in       -o requirements/check.txt
    check: pre-commit autoupdate
